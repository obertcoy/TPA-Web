package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/obertcoy/tpa-web/graph/model"
	"gorm.io/gorm"
)

// GetSearchResult is the resolver for the GetSearchResult field.
func (r *queryResolver) GetSearchResult(ctx context.Context, search string) (*model.SearchResult, error) {
	formattedSearch := "%" + search + "%"

	var users []*model.User
	err := r.Database.Debug().Where("LOWER(first_name) LIKE LOWER(?) OR LOWER(last_name) LIKE LOWER(?)", formattedSearch, formattedSearch).Find(&users).Error
	if err != nil {
		return nil, err
	}

	var posts []*model.Post
	err = r.Database.Debug().Table("posts").
		Joins("JOIN users ON posts.user_id = users.id").
		Where("LOWER(users.first_name) LIKE LOWER(?) OR LOWER(users.last_name) LIKE LOWER(?) OR LOWER(posts.text) LIKE LOWER(?)",
			formattedSearch, formattedSearch, formattedSearch).
		Order("created_at DESC").
		Preload("Comment", func(db *gorm.DB) *gorm.DB {
			return db.Order("created_at DESC")
		}).
		Preload("Comment.LikedBy").
		Preload("Comment.Replies").
		Preload("LikedBy").
		Preload("SharedBy").
		Preload("Tagged").
		Preload("Group").
		Find(&posts).Error
	if err != nil {
		return nil, err
	}

	var groups []*model.Group
	err = r.Database.Debug().Where("LOWER(name) LIKE LOWER(?) AND private = ?", formattedSearch, false).Find(&groups).Error
	if err != nil {
		return nil, err
	}

	if users == nil {
		users = []*model.User{}
	}
	if posts == nil {
		posts = []*model.Post{}
	}
	if groups == nil {
		groups = []*model.Group{}
	}

	res := &model.SearchResult{
		Users:  users,
		Posts:  posts,
		Groups: groups,
	}

	return res, nil
}
