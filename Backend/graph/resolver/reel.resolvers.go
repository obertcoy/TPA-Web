package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/obertcoy/tpa-web/graph"
	"github.com/obertcoy/tpa-web/graph/model"
	"github.com/obertcoy/tpa-web/graph/service"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"gorm.io/gorm"
)

// CreateReel is the resolver for the createReel field.
func (r *mutationResolver) CreateReel(ctx context.Context, inputReel model.NewReel) (*model.Reel, error) {
	userID := ctx.Value("TokenHeader").(string)
	reel := &model.Reel{
		ID:        uuid.NewString(),
		UserID:    userID,
		Text:      inputReel.Text,
		FileURL:   inputReel.FileURL,
		CreatedAt: time.Now(),
	}

	return reel, r.Database.Save(&reel).Error
}

// DeleteReel is the resolver for the deleteReel field.
func (r *mutationResolver) DeleteReel(ctx context.Context, reelID string) (bool, error) {
	reel, err := service.GetReel(ctx, reelID)

	if err != nil {
		return false, err
	}

	return true, r.Database.Delete(&reel).Error
}

// CreateReelComment is the resolver for the createReelComment field.
func (r *mutationResolver) CreateReelComment(ctx context.Context, inputReelComment model.NewReelComment, reelID string) (*model.ReelComment, error) {
	userID := ctx.Value("TokenHeader").(string)
	var parentID *string = nil

	if inputReelComment.ParentID != nil {
		parentID = inputReelComment.ParentID
	}

	reelComment := &model.ReelComment{
		ID:        uuid.NewString(),
		ReelID:    reelID,
		Text:      inputReelComment.Text,
		CreatedAt: time.Now(),
		UserID:    userID,
		ParentID:  parentID,
	}

	return reelComment, r.Database.Save(&reelComment).Error
}

// LikeReel is the resolver for the likeReel field.
func (r *mutationResolver) LikeReel(ctx context.Context, reelID string) (bool, error) {
	userID := ctx.Value("TokenHeader").(string)
	user, _ := service.GetUser(ctx, userID)
	reel, _ := service.GetReel(ctx, reelID)

	if user == nil || reel == nil {
		return false, gqlerror.Errorf("Error like post")
	}

	reel.LikedBy = append(reel.LikedBy, user)
	return true, r.Database.Save(&reel).Error
}

// UnlikeReel is the resolver for the unlikeReel field.
func (r *mutationResolver) UnlikeReel(ctx context.Context, reelID string) (bool, error) {
	userID := ctx.Value("TokenHeader").(string)
	user, _ := service.GetUser(ctx, userID)
	reel, _ := service.GetReel(ctx, reelID)

	if user == nil || reel == nil {
		return false, gqlerror.Errorf("Error fetching")
	}

	err := r.Database.Model(&reel).Association("LikedBy").Delete(user)
	if err != nil {
		return false, fmt.Errorf("Error retrieving reel: %v", err)
	}
	return true, nil
}

// LikeReelComment is the resolver for the likeReelComment field.
func (r *mutationResolver) LikeReelComment(ctx context.Context, reelCommentID string) (bool, error) {
	userID := ctx.Value("TokenHeader").(string)
	user, _ := service.GetUser(ctx, userID)
	comment, _ := service.GetReelComment(ctx, reelCommentID)

	if user == nil || comment == nil {
		return false, gqlerror.Errorf("Error like comment")
	}

	comment.LikedBy = append(comment.LikedBy, user)
	return true, r.Database.Save(&comment).Error
}

// UnlikeReelComment is the resolver for the unlikeReelComment field.
func (r *mutationResolver) UnlikeReelComment(ctx context.Context, reelCommentID string) (bool, error) {
	userID := ctx.Value("TokenHeader").(string)
	user, userErr := service.GetUser(ctx, userID)
	comment, postErr := service.GetReelComment(ctx, reelCommentID)

	if userErr != nil || postErr != nil {
		return false, gqlerror.Errorf("Error fetching")
	}

	err := r.Database.Model(&comment).Association("LikedBy").Delete(user)
	if err != nil {
		return false, fmt.Errorf("Error retrieving post: %v", err)
	}
	return true, nil
}

// ShareReel is the resolver for the shareReel field.
func (r *mutationResolver) ShareReel(ctx context.Context, reelID string, sharedTo string) (bool, error) {
	panic(fmt.Errorf("not implemented: ShareReel - shareReel"))
}

// GetUserReel is the resolver for the getUserReel field.
func (r *queryResolver) GetUserReel(ctx context.Context, userID string) ([]*model.Reel, error) {
	var reels []*model.Reel
	return reels, r.Database.Where("user_id = ?", userID).
		Preload("Comment", func(db *gorm.DB) *gorm.DB {
			return db.Order("created_at DESC")
		}).
		Preload("Comment.LikedBy").
		Preload("Comment.Replies", func(db *gorm.DB) *gorm.DB {
			return db.Order("created_at DESC")
		}).
		Preload("LikedBy").
		Preload("SharedBy").Find(&reels).Error
}

// GetAllReel is the resolver for the getAllReel field.
func (r *queryResolver) GetAllReel(ctx context.Context) ([]*model.Reel, error) {
	var reels []*model.Reel

	return reels, r.Database.Order("created_at DESC").Preload("LikedBy").
		Preload("Comment", func(db *gorm.DB) *gorm.DB {
			return db.Order("created_at DESC")
		}).
		Preload("Comment.LikedBy").
		Preload("Comment.Replies", func(db *gorm.DB) *gorm.DB {
			return db.Order("created_at DESC")
		}).
		Preload("Comment.Replies.LikedBy").
		Preload("SharedBy").Find(&reels).Error
}

// GetReel is the resolver for the getReel field.
func (r *queryResolver) GetReel(ctx context.Context, reelID string) (*model.Reel, error) {
	return service.GetReel(ctx, reelID)
}

// User is the resolver for the user field.
func (r *reelResolver) User(ctx context.Context, obj *model.Reel) (*model.User, error) {
	return service.GetUser(ctx, obj.UserID)
}

// Comment is the resolver for the comment field.
func (r *reelResolver) Comment(ctx context.Context, obj *model.Reel) ([]*model.ReelComment, error) {
	return obj.Comment, nil
}

// User is the resolver for the user field.
func (r *reelCommentResolver) User(ctx context.Context, obj *model.ReelComment) (*model.User, error) {
	return service.GetUser(ctx, obj.UserID)
}

// Replies is the resolver for the replies field.
func (r *reelCommentResolver) Replies(ctx context.Context, obj *model.ReelComment) ([]*model.ReelComment, error) {
	return obj.Replies, nil
}

// Reel returns graph.ReelResolver implementation.
func (r *Resolver) Reel() graph.ReelResolver { return &reelResolver{r} }

// ReelComment returns graph.ReelCommentResolver implementation.
func (r *Resolver) ReelComment() graph.ReelCommentResolver { return &reelCommentResolver{r} }

type reelResolver struct{ *Resolver }
type reelCommentResolver struct{ *Resolver }
