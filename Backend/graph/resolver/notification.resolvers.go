package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/obertcoy/tpa-web/graph"
	"github.com/obertcoy/tpa-web/graph/model"
	"github.com/obertcoy/tpa-web/graph/service"
)

// CreateNotification is the resolver for the createNotification field.
func (r *mutationResolver) CreateNotification(ctx context.Context, inputNotification *model.NewNotification) (bool, error) {
	fromUserID := ctx.Value("TokenHeader").(string)
	user, err := service.GetUser(ctx, inputNotification.UserID)

	if err != nil {
		return false, err
	}

	notif := &model.Notification{
		ID:         uuid.NewString(),
		Text:       inputNotification.Text,
		UserID:     user.ID,
		CreatedAt:  time.Now(),
		Read:       false,
		FromUserID: fromUserID,
	}

	return true, r.Database.Save(&notif).Error
}

// DeleteNotification is the resolver for the deleteNotification field.
func (r *mutationResolver) DeleteNotification(ctx context.Context, notificationID string) (bool, error) {
	notif, err := service.GetNotification(ctx, notificationID)

	if err != nil {
		return false, err
	}

	if err := r.Database.Delete(&notif).Error; err != nil {
		return false, err
	}

	return true, nil
}

// ReadNotification is the resolver for the readNotification field.
func (r *mutationResolver) ReadNotification(ctx context.Context, notificationID string) (bool, error) {
	notif, err := service.GetNotification(ctx, notificationID)
	if err != nil {
		return false, err
	}

	notif.Read = true
	return true, r.Database.Save(&notif).Error
}

// User is the resolver for the user field.
func (r *notificationResolver) User(ctx context.Context, obj *model.Notification) (*model.User, error) {
	return service.GetUser(ctx, obj.UserID)
}

// GetAllNotification is the resolver for the getAllNotification field.
func (r *queryResolver) GetAllNotification(ctx context.Context) ([]*model.Notification, error) {
	panic(fmt.Errorf("not implemented: GetAllNotification - getAllNotification"))
}

// GetUserNotification is the resolver for the getUserNotification field.
func (r *queryResolver) GetUserNotification(ctx context.Context) ([]*model.Notification, error) {
	userID := ctx.Value("TokenHeader").(string)
	var notifs []*model.Notification

	blockedSubquery := r.Database.Table("user_blockedusers").Select("user_id").Where("blocked_user_id = ?", userID)

	return notifs, r.Database.Debug().Where("user_id = ? AND from_user_id NOT IN (?)", userID, blockedSubquery).Order("created_at DESC").Preload("FromUser").Find(&notifs).Error
}

// GetUserNotificationLength is the resolver for the getUserNotificationLength field.
func (r *queryResolver) GetUserNotificationLength(ctx context.Context) (int, error) {
	userID := ctx.Value("TokenHeader").(string)

	blockedSubquery := r.Database.Table("user_blockedusers").Select("user_id").Where("blocked_user_id = ?", userID)

	var count int64
	err := r.Database.Model(&model.Notification{}).Where("user_id = ? AND from_user_id NOT IN (?) AND read = ?", userID, blockedSubquery, false).Count(&count).Error

	return int(count), err
}

// Notification returns graph.NotificationResolver implementation.
func (r *Resolver) Notification() graph.NotificationResolver { return &notificationResolver{r} }

type notificationResolver struct{ *Resolver }
