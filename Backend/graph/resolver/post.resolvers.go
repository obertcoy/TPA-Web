package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"regexp"
	"time"

	"github.com/google/uuid"
	"github.com/obertcoy/tpa-web/graph"
	"github.com/obertcoy/tpa-web/graph/model"
	"github.com/obertcoy/tpa-web/graph/service"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"gorm.io/gorm"
)

// User is the resolver for the user field.
func (r *commentResolver) User(ctx context.Context, obj *model.Comment) (*model.User, error) {
	return service.GetUser(ctx, obj.UserID)
}

// Replies is the resolver for the replies field.
func (r *commentResolver) Replies(ctx context.Context, obj *model.Comment) ([]*model.Comment, error) {
	// if obj.ParentID != nil {
	// 	return service.GetReplies(ctx, *obj.ParentID)
	// }
	// return nil, nil
	return obj.Replies, nil
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, inputPost model.NewPost) (*model.Post, error) {
	userID := ctx.Value("TokenHeader")
	fmt.Println(userID)
	var fileUrl []*string = nil
	var taggedUsers []*model.User = nil

	user, userErr := service.GetUser(ctx, userID.(string))
	if userErr != nil {
		return nil, userErr
	}

	if inputPost.FileURL != nil {
		for _, url := range inputPost.FileURL {
			if url != nil {
				fileUrl = append(fileUrl, url)
			}
		}
	}
	if inputPost.TaggedID != nil {
		for _, userID := range inputPost.TaggedID {
			if userID != nil {
				taggedUser, _ := service.GetUser(ctx, *userID)
				taggedUsers = append(taggedUsers, taggedUser)

				notificationText := fmt.Sprintf("%s %s tagged you in a post.", user.FirstName, user.LastName)
				notificationInput := &model.NewNotification{
					UserID: *userID,
					Text:   notificationText,
				}

				_, notifErr := r.CreateNotification(ctx, notificationInput)
				if notifErr != nil {
					return nil, notifErr
				}
			}
		}
	}

	regex := regexp.MustCompile(`\(([^)]+)\)`)
	matches := regex.FindAllStringSubmatch(inputPost.Text, -1)

	for _, match := range matches {
		if len(match) > 1 {
			notifUserID := match[1]
			notificationText := fmt.Sprintf("%s %s mentioned you in a post.", user.FirstName, user.LastName)

			notificationInput := &model.NewNotification{
				UserID: notifUserID,
				Text:   notificationText,
			}
			_, notifErr := r.CreateNotification(ctx, notificationInput)
			if notifErr != nil {
				return nil, notifErr
			}
		}
	}

	// var group *model.Group = nil
	// if inputPost.GroupID != nil {
	// 	getGroup, err := service.GetGroup(ctx, *inputPost.GroupID)
	// 	if err != nil {
	// 		return nil, err
	// 	}
	// 	group = getGroup
	// }

	post := &model.Post{
		ID:        uuid.NewString(),
		Text:      inputPost.Text,
		FileURL:   fileUrl,
		UserID:    userID.(string),
		CreatedAt: time.Now(),
		Type:      inputPost.Type,
		GroupID:   inputPost.GroupID,
	}

	err := r.Database.Save(&post).Error
	if err != nil {
		return nil, err
	}

	post, _ = service.GetPost(ctx, post.ID)
	post.Tagged = append(post.Tagged, taggedUsers...)

	return post, r.Database.Save(&post).Error
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, inputComment model.NewComment, postID string) (*model.Comment, error) {
	userID := ctx.Value("TokenHeader").(string)

	user, userErr := service.GetUser(ctx, userID)
	if userErr != nil {
		return nil, userErr
	}

	post, err := service.GetPost(ctx, postID)
	if err != nil {
		return nil, err
	}

	var parentID *string = nil

	if inputComment.ParentID != nil {
		parentID = inputComment.ParentID
	}

	comment := &model.Comment{
		ID:        uuid.NewString(),
		PostID:    postID,
		Text:      inputComment.Text,
		CreatedAt: time.Now(),
		UserID:    userID,
		ParentID:  parentID,
	}

	if parentID == nil {

		notificationText := fmt.Sprintf("%s %s commented on your post.", user.FirstName, user.LastName)
		notificationInput := &model.NewNotification{
			UserID: post.UserID,
			Text:   notificationText,
		}
		_, notifErr := r.CreateNotification(ctx, notificationInput)
		if notifErr != nil {
			return nil, notifErr
		}

	} else {
		notificationText := fmt.Sprintf("%s %s replied to a comment on your post.", user.FirstName, user.LastName)
		notificationInput := &model.NewNotification{
			UserID: post.UserID,
			Text:   notificationText,
		}
		_, notifErr := r.CreateNotification(ctx, notificationInput)
		if notifErr != nil {
			return nil, notifErr
		}
	}

	return comment, r.Database.Save(&comment).Error
}

// LikePost is the resolver for the likePost field.
func (r *mutationResolver) LikePost(ctx context.Context, postID string) (bool, error) {
	userID := ctx.Value("TokenHeader")
	user, _ := service.GetUser(ctx, userID.(string))
	post, _ := service.GetPost(ctx, postID)

	if user == nil || post == nil {
		return false, gqlerror.Errorf("Error like post")
	}

	post.LikedBy = append(post.LikedBy, user)

	notificationText := fmt.Sprintf("%s %s liked your post.", user.FirstName, user.LastName)
	notificationInput := &model.NewNotification{
		UserID: post.UserID,
		Text:   notificationText,
	}

	_, notifErr := r.CreateNotification(ctx, notificationInput)
	if notifErr != nil {
		return false, notifErr
	}

	return true, r.Database.Save(&post).Error
}

// UnlikePost is the resolver for the unlikePost field.
func (r *mutationResolver) UnlikePost(ctx context.Context, postID string) (bool, error) {
	userID := ctx.Value("TokenHeader").(string)
	user, userErr := service.GetUser(ctx, userID)
	post, postErr := service.GetPost(ctx, postID)

	if userErr != nil || postErr != nil {
		return false, gqlerror.Errorf("Error fetching")
	}

	err := r.Database.Model(&post).Association("LikedBy").Delete(user)
	if err != nil {
		return false, fmt.Errorf("Error retrieving post: %v", err)
	}
	return true, nil
}

// LikeComment is the resolver for the likeComment field.
func (r *mutationResolver) LikeComment(ctx context.Context, commentID string) (bool, error) {
	userID := ctx.Value("TokenHeader").(string)
	user, _ := service.GetUser(ctx, userID)
	comment, _ := service.GetComment(ctx, commentID)

	if user == nil || comment == nil {
		return false, gqlerror.Errorf("Error like post")
	}

	comment.LikedBy = append(comment.LikedBy, user)

	notificationText := fmt.Sprintf("%s %s like your comment on a post.", user.FirstName, user.LastName)
	notificationInput := &model.NewNotification{
		UserID: comment.UserID,
		Text:   notificationText,
	}

	_, notifErr := r.CreateNotification(ctx, notificationInput)
	if notifErr != nil {
		return false, notifErr
	}

	return true, r.Database.Save(&comment).Error
}

// UnlikeComment is the resolver for the unlikeComment field.
func (r *mutationResolver) UnlikeComment(ctx context.Context, commentID string) (bool, error) {
	userID := ctx.Value("TokenHeader").(string)
	user, userErr := service.GetUser(ctx, userID)
	comment, postErr := service.GetComment(ctx, commentID)

	if userErr != nil || postErr != nil {
		return false, gqlerror.Errorf("Error fetching")
	}

	err := r.Database.Model(&comment).Association("LikedBy").Delete(user)
	if err != nil {
		return false, fmt.Errorf("Error retrieving post: %v", err)
	}
	return true, nil
}

// SharePost is the resolver for the sharePost field.
func (r *mutationResolver) SharePost(ctx context.Context, postID string, sharedTo string) (bool, error) {
	userID := ctx.Value("TokenHeader").(string)
	user, err := service.GetUser(ctx, userID)

	_, err = service.GetUser(ctx, sharedTo)
	if err != nil {
		return false, err
	}
	post, _ := service.GetPost(ctx, postID)

	if post == nil {
		return false, gqlerror.Errorf("Error share post")
	}

	var users []string
	users = append(users, userID, sharedTo)

	userChatRoom := &model.NewChatRoom{
		UserID:  users,
		GroupID: nil,
	}

	chatRoom, err := r.GoToChatRoom(ctx, *userChatRoom)
	if err != nil {
		return false, err
	}

	inputChat := &model.NewChat{
		ChatRoomID: chatRoom.ID,
		PostID:     &postID,
	}

	_, err = r.CreateChat(ctx, *inputChat)
	if err != nil {
		return false, err
	}

	post.SharedBy = append(post.SharedBy, user)

	notificationText := fmt.Sprintf("%s %s shared your post.", user.FirstName, user.LastName)
	notificationInput := &model.NewNotification{
		UserID: sharedTo,
		Text:   notificationText,
	}

	_, notifErr := r.CreateNotification(ctx, notificationInput)
	if notifErr != nil {
		return false, notifErr
	}

	return true, r.Database.Save(&post).Error
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, postID string) (bool, error) {
	post, err := service.GetPost(ctx, postID)
	if err != nil {
		return false, err
	}

	return true, r.Database.Delete(&post).Error
}

// User is the resolver for the user field.
func (r *postResolver) User(ctx context.Context, obj *model.Post) (*model.User, error) {
	return service.GetUser(ctx, obj.UserID)
}

// Comment is the resolver for the comment field.
func (r *postResolver) Comment(ctx context.Context, obj *model.Post) ([]*model.Comment, error) {
	return obj.Comment, nil
}

// Group is the resolver for the group field.
func (r *postResolver) Group(ctx context.Context, obj *model.Post) (*model.Group, error) {
	return obj.Group, nil
}

// GetAllPost is the resolver for the getAllPost field.
func (r *queryResolver) GetAllPost(ctx context.Context) ([]*model.Post, error) {
	userID := ctx.Value("TokenHeader").(string)
	currentUser, userErr := service.GetUser(ctx, userID)
	if userErr != nil {
		return nil, userErr
	}

	var posts []*model.Post

	friendSubquery := r.Database.Table("user_friends").Select("friend_id").Where("user_id = ?", currentUser.ID)
	specificFriendSubquery := r.Database.Table("user_specificfriends").Select("specific_friend_id").Where("user_id = ?", currentUser.ID)
	groupSubquery := r.Database.Table("user_group_roles").Select("group_id").Where("user_id = ?", userID)

	err := r.Database.
		Order("created_at DESC").
		Preload("Comment", func(db *gorm.DB) *gorm.DB {
			return db.Order("created_at DESC")
		}).
		Preload("Comment.LikedBy").
		Preload("Comment.Replies").
		Preload("LikedBy").
		Preload("SharedBy").
		Preload("Tagged").
		Preload("Group").
		Where("(user_id = ? OR type = 'public' OR (type = 'friends' AND user_id IN (?)) OR (type = 'specific' AND user_id IN (?)))",
			currentUser.ID, friendSubquery, specificFriendSubquery).Where("group_id IS NULL OR group_id IN (?)", groupSubquery).
		Find(&posts).Error

	if err != nil {
		return nil, err
	}

	return posts, nil
}

// GetPost is the resolver for the getPost field.
func (r *queryResolver) GetPost(ctx context.Context, id string) (*model.Post, error) {
	return service.GetPost(ctx, id)
}

// GetComment is the resolver for the getComment field.
func (r *queryResolver) GetComment(ctx context.Context, id string) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: GetComment - getComment"))
}

// GetUserPost is the resolver for the getUserPost field.
func (r *queryResolver) GetUserPost(ctx context.Context) ([]*model.Post, error) {
	userID := ctx.Value("TokenHeader").(string)
	var posts []*model.Post

	return posts, r.Database.Where("user_id = ?", userID).
		Order("created_at DESC").
		Preload("Comment", func(db *gorm.DB) *gorm.DB {
			return db.Order("created_at DESC")
		}).
		Preload("Comment.LikedBy").
		Preload("Comment.Replies").
		Preload("LikedBy").
		Preload("SharedBy").
		Preload("Tagged").
		Preload("Group").
		Find(&posts).Error
}

// GetAllPostDebug is the resolver for the getAllPostDebug field.
func (r *queryResolver) GetAllPostDebug(ctx context.Context) ([]*model.Post, error) {
	var posts []*model.Post

	return posts, r.Database.
		Order("created_at DESC").
		Preload("Comment", func(db *gorm.DB) *gorm.DB {
			return db.Order("created_at DESC")
		}).
		Preload("Comment.LikedBy").
		Preload("Comment.Replies").
		Preload("LikedBy").
		Preload("SharedBy").
		Preload("Tagged").
		Preload("Group").
		Find(&posts).Error
}

// GetGroupPost is the resolver for the getGroupPost field.
func (r *queryResolver) GetGroupPost(ctx context.Context, groupID string) ([]*model.Post, error) {
	var groupPosts []*model.Post
	return groupPosts, r.Database.Order("created_at DESC").
		Preload("Comment", func(db *gorm.DB) *gorm.DB {
			return db.Order("created_at DESC")
		}).
		Preload("Comment.LikedBy").
		Preload("Comment.Replies").
		Preload("LikedBy").
		Preload("SharedBy").
		Preload("Tagged").
		Preload("Group").Where("group_id = ?", groupID).Find(&groupPosts).Error
}

// Comment returns graph.CommentResolver implementation.
func (r *Resolver) Comment() graph.CommentResolver { return &commentResolver{r} }

// Post returns graph.PostResolver implementation.
func (r *Resolver) Post() graph.PostResolver { return &postResolver{r} }

type commentResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
