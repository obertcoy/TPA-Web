type Group{
    id:ID!
    name: String!
    bannerImageURL: String
    user:[User!] @goField(forceResolver: true)
    createdAt: Time!
    pendingUser: [User!]
}

type GroupFile{
    id: ID!
    user: User! @goField(forceResolver: true)
    fileURL: String!
    fileName: String!
    type: String!
    createdAt: Time!
}

input NewGroup{
    name: String!
    private: Boolean!
}

input NewGroupFile{
    groupID: ID!
    fileURL: String!
    fileName: String!
    type: String!
}

type GroupUser{
    user: User! @goField(forceResolver: true)
    role: String!
}

extend type Query{

    getAllUserGroup:[Group!] @auth
    getGroup(groupID: ID!): Group! @auth
    getAllGroupFile(groupID: ID!): [GroupFile!] @auth

    checkAdminUser(groupID: ID!): Boolean! @auth
    getAllGroupUser(groupID: ID!): [GroupUser!] @auth
    getNonMemberUser(groupID: ID!): [User!] @auth
    checkMember(groupID: ID!): Boolean! @auth
    checkInvite(groupID: ID!): Boolean! @auth
}

extend type Mutation{

    uploadGroupFile(inputGroupFile: NewGroupFile!): GroupFile! @auth
    createGroup(inputGroup: NewGroup!): Group! @auth
    promoteMember(groupID: ID!, userID: ID!): Boolean! @auth 
    approveRequest(groupID: ID!, userID: ID!): Boolean! @auth
    rejectRequest(groupID: ID!, userID: ID!): Boolean! @auth
    kickMember(groupID: ID!, userID: ID!): Boolean! @auth
    editGroupBanner(groupID: ID!, fileURL: String!): Boolean! @auth
    deleteGroupFile(groupID: ID!, fileID: ID!): Boolean! @auth
    inviteFriend(groupID: ID!, userID: ID!): Boolean! @auth
    requestJoinGroup(groupID:ID!): Boolean! @auth
    leaveGroup(groupID: ID!): Boolean! @auth
}